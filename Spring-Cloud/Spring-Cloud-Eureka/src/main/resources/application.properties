server.port=8761
spring.application.name=eureka
eureka.instance.hostname=eureka-server

## 是否注册自己
eureka.client.register-with-eureka=false
## 检索注册中心的实例
eureka.client.fetch-registry=false
## 服务注册中心
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/

## 如果想以ip的形式定义注册中心，设置为true就行
eureka.instance.prefer-ip-address=false

## 如果没有设置默认的编解码器将使用全JSON或者xml编解码器，获取的是编码器的类名称
##eureka.server.json-codec-name=
##eureka.server.xml-codec-name=

## 是否禁用增量
eureka.server.disable-delta=false
eureka.server.disable-delta-for-remote-regions=false
## 客户端保持增量信息缓存的时间，从而保证不会丢失这些信息，单位为毫秒，默认为3 * 60 * 1000
eureka.server.retention-time-in-m-s-in-delta-queue=180000

##  表示集群节点之间的复制是否为了网络效率而进行批处理，默认为false
eureka.server.batch-replication=false

##  Eureka服务器是否应该登录clientAuthHeaders，默认为true
eureka.server.log-identity-headers=true

eureka.server.max-elements-in-peer-replication-pool=10000

## 自我保护模式，当出现出现网络分区、eureka在短时间内丢失过多客户端时，会进入自我保护模式，即一个服务长时间没有发送心跳，eureka也不会将其删除，默认为true
## 可以进入保护模式，设置为false之后，则会严格执行不可用实例剔除。
eureka.server.enable-self-preservation=true
## 阈值因子，默认是0.85，如果阈值比最小值大，则自我保护模式开启
eureka.server.renewal-percent-threshold=0.85
## 阈值更新的时间间隔，单位为毫秒，默认为15 * 60 * 1000
eureka.server.renewal-threshold-update-interval-ms=900000


#########################################################配置绑定的策略##############################################################################################
## 获取配置绑定EIP,ENI或Route53的策略。
eureka.server.binding-strategy=eip
##获取服务器尝试绑定到候选的EIP的次数，默认为3
eureka.server.e-i-p-bind-rebind-retries=3
## 服务器检查ip绑定的时间间隔，单位为毫秒，默认为1 * 60 * 1000
eureka.server.e-i-p-binding-retry-interval-ms-when-unbound=60000
## 与上面的是同一作用，仅仅是稳定状态检查，默认为5 * 60 * 1000
eureka.server.e-i-p-binding-retry-interval-ms=300000



###################################################### eureka server 彼此之间的参数 ##################################################################################

##集群里eureka节点的变化信息更新的时间间隔，单位为毫秒，默认为10 * 60 * 1000
eureka.server.peer-eureka-nodes-update-interval-ms=600000

## 服务器节点的状态信息被更新的时间间隔，单位为毫秒，默认为30 * 1000
eureka.server.peer-eureka-status-refresh-time-interval-ms=30000

## 在Eureka服务器获取不到集群里对等服务器上的实例时，需要等待的时间，单位为毫秒，默认为1000 * 60 * 5
eureka.server.wait-time-in-ms-when-sync-empty=300000
## eureka server 连接其他eureka server的超时
eureka.server.peer-node-connect-timeout-ms=200

## 获取对等节点上http连接的总数，默认为1000
eureka.server.peer-node-total-connections=1000

##当eureka服务器启动时尝试去获取集群里其他服务器上的注册信息的次数，默认为0, 也有说是5
eureka.server.registry-sync-retries=0
##当eureka服务器启动时获取其他服务器的注册信息失败时，会再次尝试获取，期间需要等待的时间，默认为30 * 1000毫秒
eureka.server.registry-sync-retry-wait-ms=30000
## 连接到对等远程地eureka节点的超时时间，默认为1000毫秒
eureka.server.remote-region-connect-timeout-ms=1000
## 获取远程地区对等节点上http连接的总数，默认为1000
eureka.server.remote-region-total-connections=1000

eureka.server.remote-region-fetch-thread-pool-size=20
## eureka服务器中获取的内容是否在远程地区被压缩，默认为true
eureka.server.g-zip-content-from-remote-region=true

eureka.server.remote-region-trust-store-password=changeit


## 目前采用的是二级缓存策略，一个是读写高速缓存过期策略，另一个没有过期只有只读缓存，默认为true，表示只读缓存
eureka.server.use-read-only-response-cache=true


## 限流
##Rate limiter implementation is based on token bucket algorithm. There are two parameters:
## 1.burst size - maximum number of requests allowed into the system as a burst
## 2.average rate - expected number of requests per second (RateLimiters using MINUTES is also supported)
## 此处使用的是令牌桶和漏桶算法。 for more information: com.netflix.discovery.util.RateLimiter
## https://blog.csdn.net/cyq12345_/article/details/78810087
eureka.server.rate-limiter-enabled=false
eureka.server.rate-limiter-full-fetch-average-rate=100
eureka.server.rate-limiter-burst-size=10
eureka.server.rate-limiter-registry-fetch-average-rate=500
eureka.server.rate-limiter-throttle-standard-clients=false